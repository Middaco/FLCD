<program> ::= <decllist>|<cmpdstmt>
<decllist> ::= <declaration>|<listDecl>|<listDecl><decllist>|<declaration><decllist>
<declaration> ::= let <decIdentifierList> <type>
<decIdentifierList> ::= <identifier>|<identifier> <decIddentifierList>
<identifier> ::= string
<type> ::= boolean | char | integer | double
<listDecl> ::= let <listIdentifierList> []
<listIdentifierList> ::= <identifier>:<listLength>|<identifier>:<listLength><listIdentifierList>
<listLength> ::= integer
<cmpdstmt> ::= <stmtlist>
<stmtlist> ::= <stmt> | <stmt><stmtlist>
<stmt> ::= <simplstmt> | <structstmt>
<simplstmt> ::= <assignstmt> | <istmt> | <ostmt>
<assignstmt> ::= assign(identifier, <expression>)
<expression> ::= <expression> "+" <term> | <expression> "-" <term> | <term>
<term> ::= <term> "*" <factor> | <term> "/" <factor> | <term> "//" <factor> | <factor>
<factor> ::= "(" <expression> ")" | identifier | <const>
<const> ::= int | double | bool | string | character
<istmt> ::= read(identifier)
<ostmt> ::= print(identifier) | print(<const>)
<structstmt> ::= <cmpdstmt> | <ifstmt> | <whilestmt>
<ifstmt> ::= if (<condition>) <stmt> | if (<condition>) <stmt> else <stmt>
<condition> ::= <expression> <RELATION> <expression>
<whilestmt> ::= loop <stmt>
<RELATION> ::= < | <= | = | != | >= | >
